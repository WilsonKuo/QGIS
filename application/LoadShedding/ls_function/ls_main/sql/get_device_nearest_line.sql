/*################################################################################################################################################## 
--##                  
--##  Purpose:			Following scripts are to trace and find the nearest line of each device
--##                    
--##  Rely on table:    "CAPACITORPARAM"    FRNODEIDX
--##                    "SWITCHPARAM"       FRNODEIDX, TONODEIDX
--##                    "LOADPARAM"         FRNODEIDX
--##                    "TRANSFORMERPARAM"  FRNODEIDX, TONODEIDX
--##                    "GENERATORPARAM"    TONODEIDX,
--##                    "LINEPARAM"         FRNODEIDX, TONODEIDX
--##                    "OUTPUTXREF"         STATION, CATEGORY, POINT, ATTRIBUTE, RTDBTYPE               
--##                    
--##  Additional notes:	
--##                    1. PROCESSING SPEED 50,000 DEVICE/MIN. (EXCLUDE SOURCENODE AND LINE)
--##                    2. SET LINE FSC = 100 BECAUSE I WANT TO FIRSTLY TRACE LINE INSTEAD OF OTHER DEVICE
--##                    
--##  Created on:      	2021-11-18 by WK
--##  Last modify:     	2021-11-18 by WK
--##################################################################################################################################################*/

--#Create Trace Table
DROP TABLE LINEXREF;
CREATE TABLE LINEXREF AS
SELECT 'CAPACITORINPUT'   TABLENAME, NAME, IDX, 102  FSC, 0 UFID, NODEIDX FRNODEIDX, 0 TONODEIDX,       0 VST_CTR, 0 NEAREST_LINE_IDX FROM CAPACITORPARAM
UNION
SELECT 'SWITCHINPUT'      TABLENAME, NAME, IDX, 114  FSC, 0 UFID, FRNODEIDX        , TONODEIDX,         0 VST_CTR, 0 NEAREST_LINE_IDX FROM SWITCHPARAM
UNION
SELECT 'LOADINPUT'        TABLENAME, NAME, IDX, 115  FSC, 0 UFID, NODEIDX FRNODEIDX, 0 TONODEIDX,       0 VST_CTR, 0 NEAREST_LINE_IDX FROM LOADPARAM
UNION
SELECT 'TRANSFORMERINPUT' TABLENAME, NAME, IDX, 118  FSC, 0 UFID, FRNODEIDX        , TONODEIDX,         0 VST_CTR, 0 NEAREST_LINE_IDX FROM TRANSFORMERPARAM
UNION
SELECT 'GENERATORINPUT'   TABLENAME, NAME, IDX, 4321 FSC, 0 UFID, 0 FRNODEIDX      , NODEIDX TONODEIDX, 0 VST_CTR, 0 NEAREST_LINE_IDX FROM GENERATORPARAM
UNION
SELECT 'LINEOUTPUT'       TABLENAME, NAME, IDX, 100  FSC, 0 UFID, FRNODEIDX        , TONODEIDX,         0 VST_CTR, 0 NEAREST_LINE_IDX FROM LINEPARAM;
UPDATE LINEXREF SET UFID = ROWNUM;
COMMIT;
--#Optimize Performance
CREATE INDEX LINEXREF_FRNODEIDX ON LINEXREF (FRNODEIDX);
CREATE INDEX LINEXREF_TONODEIDX ON LINEXREF (TONODEIDX);
CREATE INDEX LINEXREF_VST ON LINEXREF (VST_CTR);
CREATE INDEX LINEXREF_UFID ON LINEXREF (UFID);

DECLARE
    VSTCTR NUMBER := 0; 
    NEARESTLINEIDX NUMBER := 0;
    PROCEDURE TRACE(INNID IN NUMBER, INUFID IN NUMBER, STARTUFID IN NUMBER) 
    IS
    BEGIN
        --# ORDER BY FSC: WANT TO FIRSTLY TRACE LINE INSTEAD OF OTHER OBJECT
        FOR DEV IN (SELECT * FROM LINEXREF WHERE (FRNODEIDX = INNID OR TONODEIDX = INNID) AND UFID <> INUFID ORDER BY FSC)
        LOOP
            SELECT VST_CTR INTO VSTCTR FROM LINEXREF WHERE UFID=DEV.UFID;
            VSTCTR := VSTCTR + 1;
            UPDATE LINEXREF SET VST_CTR = VSTCTR WHERE UFID=DEV.UFID;
            COMMIT;
            --# PREVENT OBJECT FROM BEING TRACED TWICE
            IF VSTCTR < 2 AND NEARESTLINEIDX = 0 THEN
                IF DEV.FSC = 100 THEN
                    NEARESTLINEIDX := DEV.IDX;
                    UPDATE LINEXREF SET NEAREST_LINE_IDX = NEARESTLINEIDX WHERE UFID = STARTUFID;
                    COMMIT;
                    EXIT;
                ELSE
                    IF DEV.FRNODEIDX = INNID THEN
                        --# IF TONODEIDX = 0 AND KEEP TRACING, IT WILL HAPPEN UNPREDICTABLE SITUATION
                        IF DEV.TONODEIDX = 0 THEN
                            CONTINUE;
                        ELSE
                            TRACE(DEV.TONODEIDX, DEV.UFID, STARTUFID);
                        END IF;
                    ELSIF DEV.TONODEIDX = INNID THEN
                        --# IF FRNODEIDX = 0 AND KEEP TRACING, IT WILL HAPPEN UNPREDICTABLE SITUATION
                        IF DEV.FRNODEIDX = 0 THEN 
                            CONTINUE;
                        ELSE
                            TRACE(DEV.FRNODEIDX, DEV.UFID, STARTUFID);
                        END IF;
                    ELSE
                        EXIT;
                    END IF;
                END IF;
            END IF;
        END LOOP;
    END TRACE;
BEGIN
    --# Only Got Frnodeid
    FOR ONENODEDEV IN (SELECT * FROM LINEXREF WHERE FSC IN (102, 115))
    LOOP
        --# Reset!
        NEARESTLINEIDX := 0;
        UPDATE LINEXREF SET VST_CTR = 0 WHERE VST_CTR > 0;
        TRACE(ONENODEDEV.FRNODEIDX, ONENODEDEV.UFID, ONENODEDEV.UFID);
    END LOOP;
    --# Got both Frnodeid and Tonodeid
    FOR TWONODEDEV IN (SELECT * FROM LINEXREF WHERE FSC IN (114, 118))
    LOOP
        --# Reset!
        NEARESTLINEIDX := 0;
        UPDATE LINEXREF SET VST_CTR = 0 WHERE VST_CTR > 0;
        TRACE(TWONODEDEV.FRNODEIDX, TWONODEDEV.UFID, TWONODEDEV.UFID);
        IF TWONODEDEV.NEAREST_LINE_IDX = 0 THEN
            TRACE(TWONODEDEV.TONODEIDX, TWONODEDEV.UFID, TWONODEDEV.UFID);
        END IF;
    END LOOP;
    --# Only Got Tonodeid
    FOR ONENODEDEV IN (SELECT * FROM LINEXREF WHERE FSC IN (4321))
    LOOP
        --# Reset!
        NEARESTLINEIDX := 0;
        UPDATE LINEXREF SET VST_CTR = 0 WHERE VST_CTR > 0;
        TRACE(ONENODEDEV.TONODEIDX, ONENODEDEV.UFID, ONENODEDEV.UFID);
    END LOOP;

END;
/

--# Remove Line
DELETE LINEXREF WHERE FSC = 100;
COMMIT;
--# Adjust Column
ALTER TABLE LINEXREF DROP COLUMN UFID;
ALTER TABLE LINEXREF DROP COLUMN FSC;
ALTER TABLE LINEXREF DROP COLUMN FRNODEIDX;
ALTER TABLE LINEXREF DROP COLUMN TONODEIDX;
ALTER TABLE LINEXREF DROP COLUMN VST_CTR;

ALTER TABLE LINEXREF ADD (STATION_LINE   NUMBER(5));
ALTER TABLE LINEXREF ADD (CATEGORY_LINE  CHAR(1));
ALTER TABLE LINEXREF ADD (POINT_LINE     NUMBER(5));
ALTER TABLE LINEXREF ADD (ATTRIBUTE_LINE VARCHAR2(5));
ALTER TABLE LINEXREF ADD (RTDBTYPE_LINE  CHAR(1));

--# Merge Line Point
MERGE INTO LINEXREF TARGET
USING (SELECT TABLENAME, KEYIDX, STATION, CATEGORY, POINT, ATTRIBUTE, DECODE(RTDBTYPE, 1, 'S', 2, 'T') RTDBTYPE FROM OUTPUTXREF OX WHERE TABLENAME = 'LINEOUTPUT' AND COLNAME = 'COLORCODE') SOURCE
ON (TARGET.NEAREST_LINE_IDX=SOURCE.KEYIDX)
WHEN MATCHED THEN
UPDATE 
    SET TARGET.STATION_LINE=SOURCE.STATION, TARGET.CATEGORY_LINE=SOURCE.CATEGORY, TARGET.POINT_LINE=SOURCE.POINT, TARGET.ATTRIBUTE_LINE=SOURCE.ATTRIBUTE, TARGET.RTDBTYPE_LINE=SOURCE.RTDBTYPE;

--# Adjust Column
ALTER TABLE LINEXREF DROP COLUMN IDX;
ALTER TABLE LINEXREF DROP COLUMN NEAREST_LINE_IDX;
EXIT;

